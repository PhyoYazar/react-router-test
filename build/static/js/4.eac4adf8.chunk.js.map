{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","className","classes","form","onSubmit","event","preventDefault","enteredText","current","value","commentData","text","quoteID","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addCommentHandler","useCallback","LoadingSpinner","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuotes","path","exact","to","url"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,MAAQ,kC,iJC2CXC,EArCQ,SAACC,GACtB,IAAMC,EAAiBC,mBAEvB,EAAuCC,YAAQC,KAAY,GAAnDC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAErBC,EAAmBR,EAAnBQ,eAERC,qBAAU,WACO,cAAXH,GAA2BC,GAC7BC,MAED,CAACA,EAAgBD,EAAOD,IAa3B,OACE,uBAAMI,UAAWC,IAAQC,KAAMC,SAZP,SAACC,GACzBA,EAAMC,iBAEN,IAAMC,EAAcf,EAAegB,QAAQC,MAK3Cb,EAAY,CAAEc,YAAa,CAAEC,KAAMJ,GAAeK,QAASrB,EAAMqB,WAIjE,UACE,sBAAKX,UAAWC,IAAQW,QAAxB,UACE,uBAAOC,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAKzB,OAEvC,qBAAKS,UAAWC,IAAQgB,QAAxB,SACE,wBAAQjB,UAAU,MAAlB,+B,iBC5BOkB,EARK,SAAC5B,GACnB,OACE,oBAAIU,UAAWC,IAAQkB,KAAvB,SACE,4BAAI7B,EAAMoB,U,iBCQDU,EAVM,SAAC9B,GACpB,OACE,oBAAIU,UAAWC,IAAQoB,SAAvB,SACG/B,EAAM+B,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8Bb,KAAMa,EAAQb,MAA1Ba,EAAQT,UC+DnBU,EA3DE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACMC,EAASC,cACPlB,EAAYiB,EAAZjB,QAER,EAAsDlB,YAAQqC,KAAtDnC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcmC,EAAnC,EAA6BC,KAE7BjC,qBAAU,WACRJ,EAAYgB,KACX,CAACA,EAAShB,IAEb,IAQI0B,EAJEY,EAAoBC,uBAAY,WACpCvC,EAAYgB,KACX,CAACA,EAAShB,IAuBb,MAnBe,YAAXC,IACFyB,EACE,qBAAKrB,UAAU,WAAf,SACE,cAACmC,EAAA,EAAD,OAKS,cAAXvC,GAA0BmC,GAAkBA,EAAeK,OAAS,IACtEf,EAAW,cAAC,EAAD,CAAcA,SAAUU,KAIxB,cAAXnC,GACEmC,GAA4C,IAA1BA,EAAeK,SAEnCf,EAAW,mBAAGrB,UAAU,WAAb,0CAIX,0BAASA,UAAWC,IAAQoB,SAA5B,UACE,gDACEK,GACA,wBAAQ1B,UAAU,MAAMqC,QAjCC,WAC7BV,GAAmB,IAgCf,2BAIDD,GACC,cAAC,EAAD,CACEf,QAASiB,EAAOjB,QAChBb,eAAgBmC,IAGnBZ,M,iBCtDQiB,EATU,SAAChD,GACxB,OACE,yBAAQU,UAAWC,IAAQsC,MAA3B,UACE,4BAAIjD,EAAMoB,OACV,qCAAapB,EAAMkD,aCuDVC,UAlDK,WAClB,IAAMb,EAASC,cACTa,EAAQC,cAENhC,EAAYiB,EAAZjB,QAER,EAKIlB,YAAQmD,KAAgB,GAJ1BjD,EADF,EACEA,YACAC,EAFF,EAEEA,OACMiD,EAHR,EAGEb,KACAnC,EAJF,EAIEA,MAOF,OAJAE,qBAAU,WACRJ,EAAYgB,KACX,CAAChB,EAAagB,IAEF,YAAXf,EAEA,qBAAKI,UAAU,WAAf,SACE,cAACmC,EAAA,EAAD,MAKFtC,EACK,mBAAGG,UAAU,WAAb,SAAyBH,IAG7BgD,EAAanC,KAGhB,eAAC,WAAD,WACE,cAAC,EAAD,CAAkBA,KAAMmC,EAAanC,KAAM8B,OAAQK,EAAaL,SAChE,cAAC,IAAD,CAAOM,KAAMJ,EAAMI,KAAMC,OAAK,EAA9B,SACE,qBAAK/C,UAAU,WAAf,SACE,cAAC,IAAD,CAAMA,UAAU,YAAYgD,GAAE,UAAKN,EAAMO,IAAX,aAA9B,+BAOJ,cAAC,IAAD,CAAOH,KAAI,UAAKJ,EAAMI,KAAX,aAAX,SACE,cAAC,EAAD,SAfyB","file":"static/js/4.eac4adf8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useEffect, useRef } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment, true);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [onAddedComment, error, status]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({ commentData: { text: enteredText }, quoteID: props.quoteID });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useState, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteID } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteID);\n  }, [quoteID, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addCommentHandler = useCallback(() => {\n    sendRequest(quoteID);\n  }, [quoteID, sendRequest]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === 'completed' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className='centered'>No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteID={params.quoteID}\n          onAddedComment={addCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from 'react';\nimport { Route, useParams, Link, useRouteMatch } from 'react-router-dom';\nimport { Fragment } from 'react/cjs/react.production.min';\n\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\n\nconst QuoteDetail = () => {\n  const params = useParams();\n  const match = useRouteMatch();\n\n  const { quoteID } = params;\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(quoteID);\n  }, [sendRequest, quoteID]);\n\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className='centered'>{error}</p>;\n  }\n\n  if (!loadedQuotes.text) return <p>No Quote found</p>;\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuotes.text} author={loadedQuotes.author} />\n      <Route path={match.path} exact>\n        <div className='centered'>\n          <Link className='btn--flat' to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      {/* <Route path={`/quotes/${params.quoteID}/comments`}> */}\n      {/* <Route path='/quotes/:quoteID/comments'> */}\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}